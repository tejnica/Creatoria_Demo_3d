import React from 'react';
import PropTypes from 'prop-types';

/**
 * T16 Phase 3: Smart Analysis Display Component
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ –≤–∏–¥–µ –ø–æ–Ω—è—Ç–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤
 * –ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é "Pre-parser details" –Ω–∞ user-friendly –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
const SmartAnalysisDisplay = ({ 
  semanticAnalysis, 
  preparser, 
  onStartClarification,
  hasAmbiguities = false 
}) => {
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
  const problem = semanticAnalysis?.problem;
  const ambiguities = semanticAnalysis?.ambiguities;
  const confidence = semanticAnalysis?.extraction_confidence;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
  const recognized = [];
  const missing = [];

  if (problem) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ
    if (problem.objectives?.length > 0) {
      recognized.push({
        icon: 'üéØ',
        title: '–¶–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
        count: problem.objectives.length,
        details: problem.objectives.map(obj => `${obj.type}: ${obj.target}${obj.unit ? ` (${obj.unit})` : ''}`).slice(0, 2)
      });
    }

    if (problem.variables?.length > 0) {
      recognized.push({
        icon: 'üîß',
        title: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
        count: problem.variables.length,
        details: problem.variables.map(v => `${v.name}${v.unit ? ` (${v.unit})` : ''}`).slice(0, 3)
      });
    }

    if (problem.constraints?.length > 0) {
      recognized.push({
        icon: '‚öñÔ∏è',
        title: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
        count: problem.constraints.length,
        details: problem.constraints.map(c => c.description || `${c.variable} ${c.operator} ${c.value}`).slice(0, 2)
      });
    }

    if (problem.context?.materials?.length > 0) {
      recognized.push({
        icon: 'üß±',
        title: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
        count: problem.context.materials.length,
        details: problem.context.materials.map(m => typeof m === 'string' ? m : m.name).slice(0, 2)
      });
    }
  } else if (preparser) {
    // Fallback –∫ legacy preparser –¥–∞–Ω–Ω—ã–º
    if (preparser.goal_candidates?.length > 0) {
      recognized.push({
        icon: 'üéØ',
        title: '–¶–µ–ª–∏ (–Ω–∞–π–¥–µ–Ω–Ω—ã–µ)',
        count: preparser.goal_candidates.length,
        details: preparser.goal_candidates.slice(0, 2)
      });
    }

    if (preparser.constraint_candidates?.length > 0) {
      recognized.push({
        icon: '‚öñÔ∏è',
        title: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–Ω–∞–π–¥–µ–Ω–Ω—ã–µ)',
        count: preparser.constraint_candidates.length,
        details: preparser.constraint_candidates.slice(0, 2)
      });
    }

    if (preparser.unit_mentions?.length > 0) {
      recognized.push({
        icon: 'üìè',
        title: '–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è',
        count: preparser.unit_mentions.length,
        details: preparser.unit_mentions.slice(0, 3)
      });
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –∏–∑ ambiguities
  if (ambiguities) {
    const highPriorityItems = ambiguities.high_priority || [];
    const mediumPriorityItems = ambiguities.medium_priority || [];
    
    [...highPriorityItems, ...mediumPriorityItems].slice(0, 4).forEach(item => {
      missing.push({
        icon: '‚ùå',
        title: item.category?.replace('_', ' ') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
        description: item.description,
        priority: item.priority || 'medium'
      });
    });
  }

  const confidenceColor = 
    confidence >= 0.8 ? 'text-green-600' :
    confidence >= 0.6 ? 'text-yellow-600' : 'text-red-600';

  const confidenceLabel =
    confidence >= 0.8 ? '–í—ã—Å–æ–∫–∞—è' :
    confidence >= 0.6 ? '–°—Ä–µ–¥–Ω—è—è' : '–ù–∏–∑–∫–∞—è';

  // Don't render if no data at all
  if (!semanticAnalysis && !preparser) {
    return null;
  }

  return (
    <div className="border rounded-md p-4 bg-gradient-to-r from-green-50 to-blue-50">
      {/* Header */}
      <div className="flex items-center justify-between mb-4">
        <h3 className="font-medium text-gray-900">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h3>
        {confidence && (
          <div className="text-sm">
            <span className="text-gray-600">–¢–æ—á–Ω–æ—Å—Ç—å: </span>
            <span className={`font-medium ${confidenceColor}`}>
              {confidenceLabel} ({Math.round(confidence * 100)}%)
            </span>
          </div>
        )}
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        {/* –ß—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å */}
        <div>
          <div className="flex items-center mb-3">
            <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
            <h4 className="font-medium text-green-800">–ß—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å</h4>
          </div>
          
          {recognized.length > 0 ? (
            <div className="space-y-2">
              {recognized.map((item, idx) => (
                <div key={idx} className="bg-white rounded-lg p-3 border border-green-200">
                  <div className="flex items-center justify-between mb-1">
                    <div className="flex items-center">
                      <span className="text-lg mr-2">{item.icon}</span>
                      <span className="font-medium text-gray-900">{item.title}</span>
                    </div>
                    <span className="text-sm font-medium text-green-600">{item.count}</span>
                  </div>
                  {item.details && item.details.length > 0 && (
                    <div className="text-xs text-gray-600 ml-6">
                      {item.details.map((detail, i) => (
                        <div key={i}>‚Ä¢ {detail}</div>
                      ))}
                      {item.count > item.details.length && (
                        <div className="text-gray-400">...–∏ –µ—â—ë {item.count - item.details.length}</div>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <div className="text-gray-500 text-sm italic">
              –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã
            </div>
          )}
        </div>

        {/* –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å */}
        <div>
          <div className="flex items-center mb-3">
            <div className="w-3 h-3 bg-orange-500 rounded-full mr-2"></div>
            <h4 className="font-medium text-orange-800">–ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å</h4>
          </div>
          
          {missing.length > 0 ? (
            <div className="space-y-2">
              {missing.map((item, idx) => (
                <div key={idx} className="bg-white rounded-lg p-3 border border-orange-200">
                  <div className="flex items-center mb-1">
                    <span className="text-lg mr-2">{item.icon}</span>
                    <span className="font-medium text-gray-900 capitalize">{item.title}</span>
                    {item.priority === 'high' && (
                      <span className="ml-2 px-2 py-0.5 text-xs bg-red-100 text-red-800 rounded-full">
                        –í–∞–∂–Ω–æ
                      </span>
                    )}
                  </div>
                  <div className="text-xs text-gray-600 ml-6">
                    {item.description}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-green-600 text-sm font-medium">
              ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            </div>
          )}
        </div>
      </div>

      {/* Action buttons */}
      {missing.length > 0 && (
        <div className="mt-4 p-3 bg-orange-50 rounded-lg border border-orange-200">
          <div className="flex items-center justify-between">
            <div>
              <div className="font-medium text-orange-800 text-sm">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
              </div>
              <div className="text-xs text-orange-600">
                –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
              </div>
            </div>
            {onStartClarification && (
              <button
                onClick={onStartClarification}
                className="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors"
              >
                –ù–∞—á–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ
              </button>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

SmartAnalysisDisplay.propTypes = {
  semanticAnalysis: PropTypes.object,
  preparser: PropTypes.object,
  onStartClarification: PropTypes.func,
  hasAmbiguities: PropTypes.bool
};

export default SmartAnalysisDisplay;
